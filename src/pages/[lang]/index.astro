---
import { LOCALES, useTranslations, type Lang } from "@/i18n";
import Layout from "@/layouts/Base.astro";
import pharmacyData from "@/data/pharmacyData.json";
import { validLanguages, type ValidLanguage, defaultLanguage } from '@/constants/languages';

export const prerender = true;

interface CityInfo {
  name: {
    fr: string;
    en: string;
    ar: string;
  };
  count: number;
  open24h: number;
}

type LocaleKey = keyof CityInfo['name'];

export function getStaticPaths() {
  return validLanguages.map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const currentLang = validLanguages.includes(lang as ValidLanguage) ? lang as ValidLanguage : defaultLanguage;

const translations = {
  title: {
    fr: "Accueil",
    en: "Home",
    ar: "الرئيسية"
  },
  welcome: {
    fr: "Pharmacies de Garde",
    en: "On-Duty Pharmacies",
    ar: "صيدليات الحراسة"
  },
  pharmacies: {
    fr: "pharmacies",
    en: "pharmacies",
    ar: "صيدليات"
  },
  open24h: {
    fr: "ouvertes 24h/24",
    en: "open 24h/24",
    ar: "مفتوحة 24/24"
  },
  lastUpdate: {
    fr: "Dernière mise à jour",
    en: "Last updated",
    ar: "آخر تحديث"
  }
} as const;

const t = useTranslations(currentLang as Lang);

const cities: Record<string, CityInfo> = pharmacyData.pharmacies
  .filter(pharmacy => pharmacy?.city?.[currentLang])
  .reduce((acc: Record<string, CityInfo>, pharmacy) => {
    const cityName = pharmacy.city[currentLang];
    if (!cityName) return acc;

    if (!acc[cityName]) {
      acc[cityName] = {
        name: pharmacy.city,
        count: 1,
        open24h: String(pharmacy.hours || '').includes('24h') ? 1 : 0
      };
    } else {
      acc[cityName].count++;
      if (String(pharmacy.hours || '').includes('24h')) {
        acc[cityName].open24h++;
      }
    }
    return acc;
  }, {});

const cityList = Object.values(cities)
  .sort((a: CityInfo, b: CityInfo) => 
    a.name[currentLang].localeCompare(b.name[currentLang])
  );

const lastUpdated = new Date(pharmacyData.date).toLocaleDateString(currentLang === 'ar' ? 'ar-MA' : currentLang === 'fr' ? 'fr-FR' : 'en-US');

// Function to get the correct city slug
function getCitySlug(city: CityInfo) {
  // Always use French name for consistency
  const frenchName = city.name.fr;
  if (!frenchName) return '';
  
  return frenchName
    .toLowerCase()
    .trim()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');
}
---

<Layout title={translations.title[currentLang]}>
  <main class="main">
    <div class="header">
      <h1>{translations.welcome[currentLang]}</h1>
      <div class="header-description">
        {currentLang === 'fr' && (
          <>
            <h2>Vous cherchez une pharmacie de garde ?</h2>
            <p>Que ce soit pour des médicaments essentiels en pleine nuit, tôt le matin ou en cas d'urgence, Pharma SOS est votre partenaire fiable. Localisez la pharmacie la plus proche en quelques clics et obtenez l'aide dont vous avez besoin, quand vous en avez besoin.</p>
          </>
        )}
        {currentLang === 'ar' && (
          <>
            <h2>هل تبحث عن صيدلية حراسة مفتوحة ؟</h2>
            <p>سواء كنت بحاجة إلى أدوية أساسية في منتصف الليل، أو في الصباح الباكر، أو في حالة الطوارئ، فإن Pharma SOS هو شريكك الموثوق. حدد موقع الصيدلية الأقرب إليك ببضع نقرات واحصل على المساعدة التي تحتاجها، عندما تحتاجها.</p>
          </>
        )}
        {currentLang === 'en' && (
          <>
            <h2>Are you looking for an on-duty pharmacy?</h2>
            <p>Whether it's for essential medications in the middle of the night, early in the morning, or in case of an emergency, Pharma SOS is your reliable partner. Locate the nearest pharmacy in just a few clicks and get the help you need, when you need it.</p>
          </>
        )}
      </div>
    </div>

    <div class="cities-grid">
      {cityList.map((city) => {
        const citySlug = getCitySlug(city);
        return citySlug && (
          <a href={`/${currentLang}/pharmacies/${citySlug}`} class="city-card">
            <div class="card-header">
              <h2 class="city-name">{city.name[currentLang]}</h2>
              <div class="pill">
                <svg class="location-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 21s-8-4.5-8-11.8A8 8 0 0112 2a8 8 0 018 7.2c0 7.3-8 11.8-8 11.8z"/>
                  <circle cx="12" cy="9" r="3"/>
                </svg>
              </div>
            </div>
            <div class="card-stats">
              <div class="stat">
                <span class="stat-number">{city.count}</span>
                <span class="stat-label">{translations.pharmacies[currentLang]}</span>
              </div>
            </div>
            <div class="card-overlay"></div>
          </a>
        );
      })}
    </div>

    <footer class="footer">
      <small>{translations.lastUpdate[currentLang]}: {lastUpdated}</small>
    </footer>
  </main>
</Layout>

<style>
  .main {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .header h1 {
    font-size: 2.5rem;
    font-weight: 800;
    color: #111827;
    position: relative;
    display: inline-block;
    padding: 0 1rem;
  }

  .header h1::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, transparent, #4CAF48, transparent);
    border-radius: 2px;
  }

  .header-description {
    max-width: 800px;
    margin: 3rem auto 0;
    padding: 0 1rem;
  }

  .header-description h2,
  .header-description p {
    text-align: center;
  }

  .header-description h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #374151;
    margin-bottom: 1rem;
  }

  .header-description p {
    font-size: 1.125rem;
    line-height: 1.75;
    color: #6b7280;
  }

  .cities-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
    padding: 0.5rem;
  }

  .city-card {
    background: #1F2937;
    border: 1px solid #374151;
    border-radius: 20px;
    padding: 1.75rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .card-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(130deg, #4CAF48, #45a049);
    opacity: 0;
    transition: opacity 0.4s ease;
    z-index: 1;
    border-radius: 20px;
  }

  .city-card:hover {
    transform: translateY(-6px);
    box-shadow: 0 20px 40px -8px rgba(0, 0, 0, 0.12);
  }

  .city-card:hover .card-overlay {
    opacity: 0.05;
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    z-index: 2;
  }

  .city-name {
    font-size: 1.5rem;
    font-weight: 700;
    color: #f9fafb;
    margin: 0;
    background: linear-gradient(90deg, #f9fafb, #e5e7eb);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .pill {
    display: flex;
    align-items: center;
    justify-content: center;
    background: #374151;
    padding: 0.75rem;
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .city-card:hover .pill {
    background: #4CAF48;
  }

  .location-icon {
    width: 1.25rem;
    height: 1.25rem;
    stroke: #9ca3af;
    transition: stroke 0.3s ease;
  }

  .city-card:hover .location-icon {
    stroke: white;
  }

  .card-stats {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    z-index: 2;
  }

  .stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1.75rem;
    background: #2d3748;
    border-radius: 16px;
    transition: all 0.3s ease;
    min-width: 160px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05);
  }

  .city-card:hover .stat {
    background: #f0f9f0;
  }

  .stat-number {
    font-size: 2.75rem;
    font-weight: 800;
    line-height: 1;
    color: #4CAF48;
    text-shadow: 0 2px 4px rgba(76, 175, 72, 0.1);
  }

  .stat-label {
    margin-top: 0.75rem;
    font-size: 0.925rem;
    color: #9ca3af;
    text-align: center;
    font-weight: 500;
    letter-spacing: 0.025em;
  }

  .footer {
    text-align: center;
    margin-top: 4rem;
    padding: 2rem 0;
    color: #6b7280;
    border-top: 1px solid #e5e7eb;
  }

  @media (max-width: 640px) {
    .main {
      padding: 1rem;
    }

    .header h1 {
      font-size: 2rem;
    }

    .cities-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .header-description {
      margin-top: 2rem;
    }

    .header-description h2 {
      font-size: 1.25rem;
    }

    .header-description p {
      font-size: 1rem;
    }
  }

  @media (prefers-color-scheme: dark) {
    .header h1 {
      color: #f9fafb;
    }

    .header h1::after {
      background: linear-gradient(90deg, transparent, #4CAF48, transparent);
    }

    .city-card {
      background: #1F2937;
    }

    .city-name {
      background: linear-gradient(90deg, #f9fafb, #e5e7eb);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .pill {
      background: #374151;
    }

    .location-icon {
      stroke: #9ca3af;
    }

    .stat {
      background: #2d3748;
    }

    .city-card:hover .stat {
      background: #243042;
    }

    .stat-label {
      color: #9ca3af;
    }

    .card-overlay {
      opacity: 0;
    }

    .city-card:hover .card-overlay {
      opacity: 0.1;
    }

    .header-description h2 {
      color: #e5e7eb;
    }

    .header-description p {
      color: #9ca3af;
    }
  }
</style>